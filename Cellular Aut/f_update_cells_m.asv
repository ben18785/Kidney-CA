function [m_cell,c_move,c_heterogeneity,c_mesenchyme_options,c_vacant_select,c_mesenchyme_select] = f_update_cells_m(m_cell,m_GDNF,v_parameters)
% A function which goes through and updates each of the cells in the
% simulation area in random order in accordance to rules governing their
% specific behaviour


% A function which returns the indices of all non-vacant cells in the
% simulation area (so includes cells which are both mesenchyme and
% epithelium)
m_cellindices = f_cellindices_all_m(m_cell);


% Sort the cells into a random order
m_cellindices = f_random_indices(m_cellindices);

% Get the number of cells being simulated
cn_cells = size(m_cellindices);
cn_cells = cn_cells(1);

% Now update the cells in accordance to GDNF concentration, occupancy of
% adjacent cells etc
c_move = 0;
c_hetero = 0;
c_mesenchyme_options = 0;
c_vacant_select = 0;
c_mesenchyme_select = 0;
c_cell_options = 0;

for i = 1:cn_cells
    cell_measurables = f_update_cell_m(m_cellindices(i,:),m_cell,m_GDNF,v_parameters);
    m_cell = cell_measurables{1,1};
    c_hetero = c_hetero + cell_measurables{2,1};
    c_mesenchyme_options = c_mesenchyme_options + cell_measurables{3,1};
    c_move = c_move + cell_measurables{4,1};
    c_vacant_select = cell_measurables{5,1} + c_vacant_select; % The number of vacant cells selected to move/proliferate into
    c_mesenchyme_select = cell_measurables{6,1} + c_mesenchyme_select; % The number of mesenchyme cells selected to move into
    c_cell_options = c_cell_options + cell_measurables{7,1}; % The number of times that there are mu
    
end

c_heterogeneity = c_hetero/c_cell_options;